import * as coreHttpCompat from "@azure/core-http-compat";
import { ApiVersion75, KeyVaultClientOptionalParams, SetSecretOptionalParams, SetSecretResponse, DeleteSecretOptionalParams, DeleteSecretResponse, UpdateSecretOptionalParams, UpdateSecretResponse, GetSecretOptionalParams, GetSecretResponse, GetSecretsOptionalParams, GetSecretsResponse, GetSecretVersionsOptionalParams, GetSecretVersionsResponse, GetDeletedSecretsOptionalParams, GetDeletedSecretsResponse, GetDeletedSecretOptionalParams, GetDeletedSecretResponse, PurgeDeletedSecretOptionalParams, RecoverDeletedSecretOptionalParams, RecoverDeletedSecretResponse, BackupSecretOptionalParams, BackupSecretResponse, RestoreSecretOptionalParams, RestoreSecretResponse, GetSecretsNextOptionalParams, GetSecretsNextResponse, GetSecretVersionsNextOptionalParams, GetSecretVersionsNextResponse, GetDeletedSecretsNextOptionalParams, GetDeletedSecretsNextResponse } from "./models/index.js";
/** @internal */
export declare class KeyVaultClient extends coreHttpCompat.ExtendedServiceClient {
    apiVersion: ApiVersion75;
    /**
     * Initializes a new instance of the KeyVaultClient class.
     * @param apiVersion Api Version
     * @param options The parameter options
     */
    constructor(apiVersion: ApiVersion75, options?: KeyVaultClientOptionalParams);
    /**
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure
     * Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret. The value you provide may be copied globally for the
     *                   purpose of running the service. The value provided should not include personally identifiable or
     *                   sensitive information.
     * @param value The value of the secret.
     * @param options The options parameters.
     */
    setSecret(vaultBaseUrl: string, secretName: string, value: string, options?: SetSecretOptionalParams): Promise<SetSecretResponse>;
    /**
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an
     * individual version of a secret. This operation requires the secrets/delete permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param options The options parameters.
     */
    deleteSecret(vaultBaseUrl: string, secretName: string, options?: DeleteSecretOptionalParams): Promise<DeleteSecretResponse>;
    /**
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are
     * not specified in the request are left unchanged. The value of a secret itself cannot be changed.
     * This operation requires the secrets/set permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param options The options parameters.
     */
    updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: UpdateSecretOptionalParams): Promise<UpdateSecretResponse>;
    /**
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the
     * secrets/get permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret. This URI fragment is optional. If not specified, the
     *                      latest version of the secret is returned.
     * @param options The options parameters.
     */
    getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: GetSecretOptionalParams): Promise<GetSecretResponse>;
    /**
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret
     * identifier and its attributes are provided in the response. Individual secret versions are not
     * listed in the response. This operation requires the secrets/list permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    getSecrets(vaultBaseUrl: string, options?: GetSecretsOptionalParams): Promise<GetSecretsResponse>;
    /**
     * The full secret identifier and attributes are provided in the response. No values are returned for
     * the secrets. This operations requires the secrets/list permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param options The options parameters.
     */
    getSecretVersions(vaultBaseUrl: string, secretName: string, options?: GetSecretVersionsOptionalParams): Promise<GetSecretVersionsResponse>;
    /**
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for
     * soft-delete. This operation requires the secrets/list permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    getDeletedSecrets(vaultBaseUrl: string, options?: GetDeletedSecretsOptionalParams): Promise<GetDeletedSecretsResponse>;
    /**
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.
     * This operation requires the secrets/get permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param options The options parameters.
     */
    getDeletedSecret(vaultBaseUrl: string, secretName: string, options?: GetDeletedSecretOptionalParams): Promise<GetDeletedSecretResponse>;
    /**
     * The purge deleted secret operation removes the secret permanently, without the possibility of
     * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires
     * the secrets/purge permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param options The options parameters.
     */
    purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options?: PurgeDeletedSecretOptionalParams): Promise<void>;
    /**
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a
     * soft-delete enabled vault. This operation requires the secrets/recover permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @param options The options parameters.
     */
    recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options?: RecoverDeletedSecretOptionalParams): Promise<RecoverDeletedSecretResponse>;
    /**
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the
     * secret will be downloaded. This operation requires the secrets/backup permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param options The options parameters.
     */
    backupSecret(vaultBaseUrl: string, secretName: string, options?: BackupSecretOptionalParams): Promise<BackupSecretResponse>;
    /**
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the
     * secrets/restore permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @param options The options parameters.
     */
    restoreSecret(vaultBaseUrl: string, secretBundleBackup: Uint8Array, options?: RestoreSecretOptionalParams): Promise<RestoreSecretResponse>;
    /**
     * GetSecretsNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param nextLink The nextLink from the previous successful call to the GetSecrets method.
     * @param options The options parameters.
     */
    getSecretsNext(vaultBaseUrl: string, nextLink: string, options?: GetSecretsNextOptionalParams): Promise<GetSecretsNextResponse>;
    /**
     * GetSecretVersionsNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param nextLink The nextLink from the previous successful call to the GetSecretVersions method.
     * @param options The options parameters.
     */
    getSecretVersionsNext(vaultBaseUrl: string, secretName: string, nextLink: string, options?: GetSecretVersionsNextOptionalParams): Promise<GetSecretVersionsNextResponse>;
    /**
     * GetDeletedSecretsNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param nextLink The nextLink from the previous successful call to the GetDeletedSecrets method.
     * @param options The options parameters.
     */
    getDeletedSecretsNext(vaultBaseUrl: string, nextLink: string, options?: GetDeletedSecretsNextOptionalParams): Promise<GetDeletedSecretsNextResponse>;
}
//# sourceMappingURL=keyVaultClient.d.ts.map