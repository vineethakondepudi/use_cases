"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextLink = exports.secretBundleBackup = exports.maxresults = exports.secretVersion = exports.tags1 = exports.secretAttributes1 = exports.contentType2 = exports.secretName1 = exports.apiVersion = exports.secretName = exports.vaultBaseUrl = exports.secretAttributes = exports.contentType1 = exports.tags = exports.value = exports.accept = exports.contentType = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.value = {
    parameterPath: "value",
    mapper: mappers_js_1.SecretSetParameters
};
exports.tags = {
    parameterPath: ["options", "tags"],
    mapper: mappers_js_1.SecretSetParameters
};
exports.contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: mappers_js_1.SecretSetParameters
};
exports.secretAttributes = {
    parameterPath: ["options", "secretAttributes"],
    mapper: mappers_js_1.SecretSetParameters
};
exports.vaultBaseUrl = {
    parameterPath: "vaultBaseUrl",
    mapper: {
        serializedName: "vaultBaseUrl",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.secretName = {
    parameterPath: "secretName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z-]+$")
        },
        serializedName: "secret-name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.secretName1 = {
    parameterPath: "secretName",
    mapper: {
        serializedName: "secret-name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contentType2 = {
    parameterPath: ["options", "contentType"],
    mapper: mappers_js_1.SecretUpdateParameters
};
exports.secretAttributes1 = {
    parameterPath: ["options", "secretAttributes"],
    mapper: mappers_js_1.SecretUpdateParameters
};
exports.tags1 = {
    parameterPath: ["options", "tags"],
    mapper: mappers_js_1.SecretUpdateParameters
};
exports.secretVersion = {
    parameterPath: "secretVersion",
    mapper: {
        serializedName: "secret-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.maxresults = {
    parameterPath: ["options", "maxresults"],
    mapper: {
        constraints: {
            InclusiveMaximum: 25,
            InclusiveMinimum: 1
        },
        serializedName: "maxresults",
        type: {
            name: "Number"
        }
    }
};
exports.secretBundleBackup = {
    parameterPath: "secretBundleBackup",
    mapper: mappers_js_1.SecretRestoreParameters
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map